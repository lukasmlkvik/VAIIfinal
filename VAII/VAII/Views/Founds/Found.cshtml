@model FoundDetailModel
@{
    ViewData["Title"] = Model.name;
}


    
<div class="position-relative"><img class="logo" src="@Model.logo" /><h2 class="text-center">@Model.name</h2></div>


<form method="get">
    <input class="none" name="s" value="@Model.Symbol">
    <div class="form-row">
        <div class="form-group col-md-5">
            <label for="from">From</label>
            <input class="form-control" type="datetime-local" name="from" id="from" value="@(Model.From)">
        </div>
        <div class="form-group col-md-5">
            <label for="to">To</label>
            <input class="form-control" type="datetime-local" name="to" id="to" value="@(Model.To)">
        </div>
        <div class="form-group col-md-2">
            <label>Resolution</label>
            <select class="form-control" name="resolution">
                <option selected="@(Model.Resolution==0)" value="0">1 min</option>
                <option selected="@(Model.Resolution==1)" value="1">5 min</option>
                <option selected="@(Model.Resolution==2)" value="2">15 min</option>
                <option selected="@(Model.Resolution==3)" value="3">30 min</option>
                <option selected="@(Model.Resolution==4)" value="4">60 min</option>
                <option selected="@(Model.Resolution==5)" value="5">Day </option>
                <option selected="@(Model.Resolution==6)" value="6">Week</option>
                <option selected="@(Model.Resolution==7)" value="7">Month</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary col-lg-3">Submit</button>
    </div>
</form>
<script>
    let to = document.getElementById("to");
    let from = document.getElementById("from");

    to.onchange =e => from.max = e.target.value;
    from.onchange =e => to.min = e.target.value;
</script>

@if ("ok".Equals(Model.s))
{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

    <div class="max-height">
        <canvas id="myChart"></canvas>
    </div>

    <script>
    var ctx = document.getElementById('myChart').getContext('2d');

        var data = JSON.parse('@Json.Serialize(@Model)');
        function format(d) {
            return d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + d.getDate() + " " +  d.getHours() + ":" + d.getMinutes();
        }

    var stackedLine = new Chart(ctx, {
        type: 'line',
        data: {
            labels: data.t.map(a => format(new Date(a * 1000))),
            datasets: [{
                    data: data.o,
                    label: "open prices",
                    borderColor: "#3e95cd",
                    fill: false
                },
                {
                    data: data.h,
                    label: "high prices",
                    borderColor: "#8e5ea2",
                    fill: false
                },
                {
                    data: data.l,
                    label: "low prices",
                    borderColor: "#3cba9f",
                    fill: false
                },
                {
                    data: data.c,
                    label: "close prices",
                    borderColor: "#e8c3b9",
                    fill: false
                },
                {
                    data: data.v,
                    label: "volume prices",
                    borderColor: "#c45850",
                    fill: false
                },
            ]
        },
        options: {
            maintainAspectRatio: false
        }
    });

    </script>
}
else
{
    <h1 class="text-warning">No Data</h1>
}
